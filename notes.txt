* Rails 5 API-based application with webpack and react

Created with: ~rails new r5api-react-starter --no-rc --webpack=react~

** Plan

   Step by step, from a basic initial set up, create a React SPA
   blogging platform (of course), using the Rails server as an API
   *only*. The only page that will be built and sent will be the basic
   app page that will load the React App component. Everything else,
   including styles, scripts, images, etc., i.e., all the bits of a
   user-facing web app, will be handled via webpacker.

   Along the way, I'll include user signup, login, and authentication
   using JSON Web Tokens. I'll be making use of the ~localStorage~ API
   to keep track of the app token the server will be providing the
   client.

*** Testing

    Just a word about testing: most of the time, the things I'm
    learning about I just implement without focusing on how I would
    test these in an actual application. I want to break that habit
    here, and figure out how to do real application testing in both
    halves of this, the Rails API server, and the React SPA. It will
    be interesting to run both of these.

    I've got guard set up on the Rails side, that should be pretty
    nice. Selenium is included in the kit, but I'd prefer to use Jest
    on the client side to make testing more fun, fast, and lighter
    weight, saving the full integration stuff where it's truly needed.



** step-001/foreman

New Rails 5.1 apps built with webpack need to have two server-type
processes running during development:

1. the usual rails server
2. webpack-dev-server, which is serving up the webpacked components,
   hot refreshing them as they're developed.

To manage this, we're installing [[https://github.com/ddollar/foreman][foreman]], which can run concurrent
processes specified in a ~Procfile~.

** step-002/users
   :LOGBOOK:
   CLOCK: [2017-04-29 Sat 14:32]--[2017-04-29 Sat 15:14] =>  0:42
   :END:

   Add a users resource to the project.

   This will be used as a basis for building authentication.

   - uncomment the ~bcrypt~ gem, since we'll need it to secure the
     user's password in the database
   - make a User model that includes:
     - username, unique, non-null, lowercase only
     - email, unique, non-null, lowercase only
     - password_digest, non-null
     - admin, boolean, false, non-null
     - ~has_secure_password~
   - write tests

** step-003/tools
   :LOGBOOK:
   CLOCK: [2017-04-29 Sat 15:16]--[2017-04-29 Sat 16:10] =>  0:54
   :END:

   Adding in some tools:
   - pry-rails
   - guard
   - guard-minitest

** step-004/initial-react
   :LOGBOOK:
   CLOCK: [2017-04-29 Sat 16:21]--[2017-04-29 Sat 16:53] =>  0:32
   :END:

   Okay, let's get some initial react stuff working.

   This isn't necessarily obvious, but we go out to the [[https://github.com/rails/webpacker][webpacker gem]]
   on github and take a look at things to get started.

   The ~helloworld~ react component is in
   ~apps/javascript/packs/helloworld.js~. We'll need a place to put
   that onto a page that gets delivered to the user.

   First, we need to create a controller that can deliver the
   component, and add the ~javascript_pack_tag~ to it. I made a static
   ~PagesController~ for this.

   #+BEGIN_SRC bash
     bin/rails g controller Pages index --no-helper --no-assets --no-javascripts --no-stylesheets
   #+END_SRC

   I'm also going to set the root route to this page.

   So that's good, we can put React components on a regular page
   served up from Rails.

** step-005/webpacker-only
   :LOGBOOK:
   CLOCK: [2017-04-29 Sat 16:56]--[2017-04-29 Sat 17:13] =>  0:17
   :END:

   In this step, I'm going to remove most of the stuff in ~app/assets~
   and the unused ~app/javascript/packs/~ files, and create a new
   React component for our application.
** step-006/jest
   :LOGBOOK:
   CLOCK: [2017-04-29 Sat 19:39]--[2017-04-29 Sat 19:39] =>  0:00
   CLOCK: [2017-04-29 Sat 17:51]--[2017-04-29 Sat 18:28] =>  0:37
   :END:

   Install, configure, and create some Jest tests.

   Discovery: configuring Jest is not straight-forward for this app!

   See: [[http://facebook.github.io/jest/docs/configuration.html]]

   #+BEGIN_SRC javascript
     "jest": {
       "rootDir": "app/javascript/packs/",
       "moduleFileExtensions": ["js", "jsx"],
       "moduleDirectories": ["node_modules", "app/javascript/packs"]
     }
   #+END_SRC

   Set the ~rootDir~ to 'app/javascript/packs' tells Jest to look
   there for application tests.

   I'm not sure what ~moduleDirectories~ is adding here, but it seems
   to work.

   *IMPORTANT!* Test files must follow the pattern: ~*.test.js?(x)~ in
   order to be found by Jest -- a *dot* instead of an *underscore* as
   in minitest!! I could probably get around this difference, but I'm
   not going to bother to figure it out.
** step-007/layout
   :LOGBOOK:
   CLOCK: [2017-04-29 Sat 23:33]--[2017-04-30 Sun 01:19] =>  1:46
   CLOCK: [2017-04-29 Sat 19:39]--[2017-04-29 Sat 23:33] =>  3:54
   :END:

   [[https://github.com/styled-components/styled-components][Styled Components]]

   Doing a Holy Grail Grid layout using styled components.

   | header    | header       | header     |
   |-----------+--------------+------------|
   | left side | main content | right side |
   |-----------+--------------+------------|
   | footer    | footer       | footer     |

   Using ~display: grid~ makes this so dang easy.
** More thoughts on Styled Components

   Reading through the docs on the [[https://github.com/styled-components/styled-components][styled-components repository]], there
   are a lot of cool things you can do with them.

   One in particular is building responsiveness up, which has been
   sort of a problem with react in the past. Looking at [[https://github.com/styled-components/styled-components/blob/master/docs/tips-and-tricks.md#media-templates][Media
   Templates]] section, this seems like a great idea for winding them
   into the styles, and is *so* much less verbose than writing the
   media queries out in CSS.

   #+BEGIN_SRC javascript
     // these sizes are arbitrary and you can set them to whatever you wish
     import { css } from 'styled-components'

     const sizes = {
       giant: 1170,
       desktop: 992,
       tablet: 768,
       phone: 376
     }

     // iterate through the sizes and create a media template
     export const media = Object.keys(sizes).reduce((accumulator, label) => {
       // use em in breakpoints to work properly cross-browser and support users
       // changing their browsers font-size: https://zellwk.com/blog/media-query-units/
       const emSize = sizes[label] / 16
       accumulator[label] = (...args) => css`
         @media (max-width: ${emSize}em) {
   	${css(...args)}
         }
       `
       return accumulator
     }, {})

     // Great! Now that you've defined your media templates, you can use them like this:

     const Container = styled.div`
       color: #333;
       ${media.desktop`padding: 0 20px;`}
       ${media.tablet`padding: 0 10px;`}
       ${media.phone`padding: 0 5px;`}
     `
   #+END_SRC

   So cool.

   They're also suggesting something in terms of organization, a
   subdir of style utilities. I sort of did that with the ~Styled~
   directory, and there's a lot more DRYing up I can do with the
   current definitions. Applying the ITCSS principles here still makes
   a ton of sense, and organizing it can help a lot, I think.

   Also, going after that Holy Grail layout was quite a bit of a
   departure from working on the project here, since I spent a
   heckalot of time figuring out GridCSS. While fun, and even
   necessary for me to understand, it's not really what *this* project
   is about. Next step will pull away from that and carry on with a
   much simpler layout.
